{"ast":null,"code":"var _jsxFileName = \"/Users/adedejiabiola/Desktop/frontend/udemy-react/zipp-clothing/src/components/sign-in/SignIn.js\";\nimport React, { useState } from 'react';\nimport './sign-in.scss';\nimport FormInput from '../form-input/FormInput';\nimport CustomButton from '../custom-button/CustomButton';\nimport PropTypes from 'prop-types';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.action';\nimport { connect } from 'react-redux';\n\nconst SignIn = ({\n  googleSignInStart,\n  emailSignInStart\n}) => {\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart({\n      email,\n      password\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    required: true,\n    handleChange: handleChange,\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    required: true,\n    handleChange: handleChange,\n    label: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Sign in\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Sign in with Google\"))));\n};\n\nSignIn.propTypes = {\n  googleSignInStart: PropTypes.func.isRequired,\n  emailSignInStart: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: emailAndPassword => dispatch(emailSignInStart(emailAndPassword))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/adedejiabiola/Desktop/frontend/udemy-react/zipp-clothing/src/components/sign-in/SignIn.js"],"names":["React","useState","FormInput","CustomButton","PropTypes","googleSignInStart","emailSignInStart","connect","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","propTypes","func","isRequired","mapDispatchToProps","dispatch","emailAndPassword"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,gBAAP;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,8BAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAMA,MAAMC,MAAM,GAAG,CAAC;AAAEH,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAD,KAA6C;AAC1D,QAAM,CAACG,eAAD,EAAkBC,cAAlB,IAAoCT,QAAQ,CAAC;AAAEU,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CAAlD;AACA,QAAM;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,eAA5B;;AAEA,QAAMI,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACAT,IAAAA,gBAAgB,CAAC;AAACK,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,CAAhB;AACD,GAHD;;AAKA,QAAMI,YAAY,GAAIF,KAAD,IAAW;AAC9B,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBJ,KAAK,CAACK,MAA9B;AACAT,IAAAA,cAAc,CAAC,EAAE,GAAGD,eAAL;AAAsB,OAACS,IAAD,GAAQD;AAA9B,KAAD,CAAd;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,eAGE;AAAM,IAAA,QAAQ,EAAEJ,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEF,KAFT;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,YAAY,EAAEK,YAJhB;AAKE,IAAA,KAAK,EAAC,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eASE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAEJ,QAHT;AAIE,IAAA,QAAQ,MAJV;AAKE,IAAA,YAAY,EAAEI,YALhB;AAME,IAAA,KAAK,EAAC,UANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAiBE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAIE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAEX,iBAArC;AAAwD,IAAA,cAAc,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJF,CAjBF,CAHF,CADF;AAgCD,CA9CD;;AAgDAG,MAAM,CAACY,SAAP,GAAmB;AACjBf,EAAAA,iBAAiB,EAAED,SAAS,CAACiB,IAAV,CAAeC,UADjB;AAEjBhB,EAAAA,gBAAgB,EAAEF,SAAS,CAACiB,IAAV,CAAeC;AAFhB,CAAnB;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCnB,EAAAA,iBAAiB,EAAG,MAAMmB,QAAQ,CAACnB,iBAAiB,EAAlB,CADI;AAEtCC,EAAAA,gBAAgB,EAAGmB,gBAAD,IAAsBD,QAAQ,CAAClB,gBAAgB,CAACmB,gBAAD,CAAjB;AAFV,CAAL,CAAnC;;AAKA,eAAelB,OAAO,CAAC,IAAD,EAAOgB,kBAAP,CAAP,CAAkCf,MAAlC,CAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport './sign-in.scss'\nimport FormInput from '../form-input/FormInput';\nimport CustomButton from '../custom-button/CustomButton';\nimport PropTypes from 'prop-types'\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.action';\nimport { connect } from 'react-redux';\n\n\n\n\n\nconst SignIn = ({ googleSignInStart, emailSignInStart }) => {\n  const [userCredentials, setCredentials] = useState({ email: '', password: ''})\n  const { email, password } = userCredentials\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    emailSignInStart({email, password})\n  }\n  \n  const handleChange = (event) => {\n    const { value, name } = event.target\n    setCredentials({ ...userCredentials, [name]: value })\n  }\n\n  return (\n    <div className='sign-in'>\n      <h2>I already have an account</h2>\n      <span>Sign in with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput type=\"email\" \n          name='email' \n          value={email} \n          required \n          handleChange={handleChange}\n          label='Email'\n        />\n\n        <FormInput \n          type=\"password\" \n          name='password' \n          value={password} \n          required \n          handleChange={handleChange}\n          label='Password'  \n        />\n        <div className=\"buttons\">\n          <CustomButton type=\"submit\">\n            Sign in\n          </CustomButton>\n          <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n            Sign in with Google\n          </CustomButton>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nSignIn.propTypes = {\n  googleSignInStart: PropTypes.func.isRequired,\n  emailSignInStart: PropTypes.func.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart : () => dispatch(googleSignInStart()),\n  emailSignInStart: (emailAndPassword) => dispatch(emailSignInStart(emailAndPassword))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}