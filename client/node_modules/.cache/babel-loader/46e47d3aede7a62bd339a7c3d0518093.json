{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { FETCH_COLLECTIONS_START, fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport { firestore, convertCollectionToMap } from '../../firebase/firebase.utils';\nexport function* fetchCollectionsStartAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapShot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionToMap, snapShot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  // the first arg for takeEvery is the actiontype to be updated and the second is the generator function you want to run\n  // takeEvrer creates a non blocking to call so that the app is non blocking\n  yield takeEvery(FETCH_COLLECTIONS_START, fetchCollectionsStartAsync);\n}","map":{"version":3,"sources":["/Users/adedejiabiola/Desktop/frontend/udemy-react/zipp-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionToMap","fetchCollectionsStartAsync","collectionRef","collection","snapShot","get","collectionsMap","error","message","fetchCollectionsStart"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,EAA2DC,uBAA3D,QAA0F,gBAA1F;AACA,SAASC,SAAT,EAAoBC,sBAApB,QAAkD,+BAAlD;AAIA,OAAO,UAAUC,0BAAV,GAAuC;AAC5C,MAAI;AACF,UAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACM,sBAAD,EAAyBI,QAAzB,CAAjC;AACA,UAAMT,GAAG,CAACE,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACG,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC;AACA;AACA,QAAMhB,SAAS,CAACG,uBAAD,EAA0BK,0BAA1B,CAAf;AACD","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects'\nimport { FETCH_COLLECTIONS_START, fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'\nimport { firestore, convertCollectionToMap } from '../../firebase/firebase.utils'\n\n\n\nexport function* fetchCollectionsStartAsync() {\n  try {\n    const collectionRef = firestore.collection('collections')\n    const snapShot = yield collectionRef.get()\n    const collectionsMap = yield call(convertCollectionToMap, snapShot)\n    yield put(fetchCollectionsSuccess(collectionsMap))\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message))\n  }\n}\n\nexport function* fetchCollectionsStart() {\n  // the first arg for takeEvery is the actiontype to be updated and the second is the generator function you want to run\n  // takeEvrer creates a non blocking to call so that the app is non blocking\n  yield takeEvery(FETCH_COLLECTIONS_START, fetchCollectionsStartAsync)\n}"]},"metadata":{},"sourceType":"module"}