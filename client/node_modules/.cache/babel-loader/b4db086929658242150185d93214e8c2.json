{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCjEF3mrgijM__hpDFqRyH4PYfYVASLVQ0\",\n  authDomain: \"crown-db-ce753.firebaseapp.com\",\n  databaseURL: \"https://crown-db-ce753.firebaseio.com\",\n  projectId: \"crown-db-ce753\",\n  storageBucket: \"crown-db-ce753.appspot.com\",\n  messagingSenderId: \"286312041232\",\n  appId: \"1:286312041232:web:7532026e23eb7c3758f395\",\n  measurementId: \"G-9CS9B0KNMJ\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // Auth user is the giant object we get when the user successfully sign in with google. It has the user display name and email\n  if (!userAuth) return; // create a user reference using firestore.doc passing in the path to the collection/document\n  // Note that the collection is like the array carrying a bunch of document objects in the db\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error('error creating user ', error);\n    }\n  } // Return userRef because we might need it somewhere else in the codebase\n\n\n  return userRef;\n};\nexport const addCollectionsAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch(); // we use batch to combibe all our set calls so if one fails to send, they all fail\n\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); // TO fire off the batch, we use .commit(). This will return a promise that resolves to a null value\n\n  return await batch.commit();\n};\nexport const convertCollectionToMap = collection => {\n  const transformedCollection = collection.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/adedejiabiola/Desktop/frontend/udemy-react/zipp-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","addCollectionsAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionToMap","transformedCollection","docs","map","title","items","data","id","routeName","encodeURI","toLowerCase","reduce","accumulator","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n  apiKey: \"AIzaSyCjEF3mrgijM__hpDFqRyH4PYfYVASLVQ0\",\n  authDomain: \"crown-db-ce753.firebaseapp.com\",\n  databaseURL: \"https://crown-db-ce753.firebaseio.com\",\n  projectId: \"crown-db-ce753\",\n  storageBucket: \"crown-db-ce753.appspot.com\",\n  messagingSenderId: \"286312041232\",\n  appId: \"1:286312041232:web:7532026e23eb7c3758f395\",\n  measurementId: \"G-9CS9B0KNMJ\"\n}\n\nfirebase.initializeApp(config)\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // Auth user is the giant object we get when the user successfully sign in with google. It has the user display name and email\n  if (!userAuth) return\n  // create a user reference using firestore.doc passing in the path to the collection/document\n  // Note that the collection is like the array carrying a bunch of document objects in the db\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n  const snapShot = await userRef.get();\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date()\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      })\n    } catch(error) {\n      console.error('error creating user ', error)\n    }\n  }\n  // Return userRef because we might need it somewhere else in the codebase\n  return userRef\n}\n\nexport const addCollectionsAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey)\n  const batch = firestore.batch() // we use batch to combibe all our set calls so if one fails to send, they all fail\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef, obj)\n  })\n  // TO fire off the batch, we use .commit(). This will return a promise that resolves to a null value\n  return await batch.commit()\n}\n\nexport const convertCollectionToMap = (collection) => {\n  const transformedCollection = collection.docs.map(doc => {\n    const { title, items } = doc.data()\n    \n    return {\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    }\n  })\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection\n    return accumulator\n  }, {})\n}\n\n\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()\ngoogleProvider.setCustomParameters({ prompt: 'select_account' })\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}